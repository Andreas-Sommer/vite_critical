<?php

namespace Belsignum\ViteCritical\Xclass\Service;

use Belsignum\ViteCritical\Domain\Model\ViteManifestItem;
use Praetorius\ViteAssetCollector\Exception\ViteException;
use Belsignum\ViteCritical\Domain\Model\ViteManifest;
use Psr\Http\Message\ServerRequestInterface;
use TYPO3\CMS\Core\Cache\Frontend\FrontendInterface;
use TYPO3\CMS\Core\Configuration\ExtensionConfiguration;
use TYPO3\CMS\Core\Core\Environment;
use TYPO3\CMS\Core\Http\ApplicationType;
use TYPO3\CMS\Core\Http\ServerRequest;
use TYPO3\CMS\Core\Package\PackageManager;
use TYPO3\CMS\Core\Page\AssetCollector;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController;

class ViteService extends \Praetorius\ViteAssetCollector\Service\ViteService
{
    private FrontendInterface $cache;
    private readonly ServerRequest $request;
    private readonly array $configuration;
    private array $viteCriticalCssConfig;

    public function __construct(
        FrontendInterface      $cache,
        AssetCollector         $assetCollector,
        PackageManager         $packageManager,
        ExtensionConfiguration $extensionConfiguration
    )
    {
        parent::__construct($cache, $assetCollector, $packageManager, $extensionConfiguration);

        $this->cache = $cache;
        if ($this->isFrontend())
        {
            $this->request = $GLOBALS['TYPO3_REQUEST'];
            $site = $this->request->getAttribute('site');
            if($site)
            {
                $this->configuration = $site->getConfiguration();
            }

        }
    }

    private function isFrontend()
    {
        return (($GLOBALS['TYPO3_REQUEST'] ?? null) instanceof ServerRequestInterface
            && ApplicationType::fromRequest($GLOBALS['TYPO3_REQUEST'])->isFrontend());
    }

    public function addAssetsFromManifest(
        string $manifestFile,
        string $entry,
        bool   $addCss = true,
        array  $assetOptions = [],
        array  $scriptTagAttributes = [],
        array  $cssTagAttributes = []
    ): void
    {
        $entry = $this->determineAssetIdentifierFromExtensionPath($entry);

        $manifestFile = $this->resolveManifestFile($manifestFile);
        $outputDir = $this->determineOutputDirFromManifestFile($manifestFile);
        $manifest = $this->parseExtendedManifestFile($manifestFile);

        if (!$manifest->get($entry)?->isEntry)
        {
            throw new ViteException(sprintf(
                'Invalid vite entry point "%s" in manifest file "%s".',
                $entry,
                $manifestFile
            ), 1683200524);
        }

        // The "external" flag has been introduced with TYPO3 v13. It allows bypassing
        // of the default path preparation by AssetRenderer, including the addition of
        // cache-busting parameters to all asset files. As this is not necessary for files
        // generated by vite, which already contain a hash in their file name, this behavior
        // is avoided with v13. This also improves the behavior of dynamic imports, which
        // could result in duplicate requests before.
        $assetOptions = [
            'external' => $this->useExternalFlag(),
            ...$assetOptions
        ];

        $entryPoint = $manifest->get($entry);

        if (!$entryPoint->isCss())
        {
            $scriptTagAttributes = $this->prepareScriptAttributes($scriptTagAttributes);

            $this->assetCollector->addJavaScript(
                "vite:{$entry}",
                $this->prepareAssetPath($outputDir . $entryPoint->file, $assetOptions['external']),
                [
                    'type' => 'module',
                    ...$scriptTagAttributes
                ],
                $assetOptions
            );
        }

        if ($addCss)
        {
            if($this->isFrontend() && $this->isCriticalCssEnabledByConfig() && $this->hasCritical($entryPoint) && $this->requestIsPartOfConfig($entryPoint->name))
            {
                // Add critical
                $this->assetCollector->addInlineStyleSheet(
                    "viteCritical:critical-{$entry}",
                    file_get_contents($this->prepareAssetPath($outputDir . $entryPoint->critical, $assetOptions['external'])),
                    ['type' => 'text/css'],
                    ['priority' => true]
                );

                if(false)
                {
                    $this->assetCollector->addStyleSheet(
                        "viteCritical:{$entry}",
                        $this->prepareAssetPath($outputDir . $entryPoint->file, $assetOptions['external']),
                        [
                            'rel'    => 'preload',
                            'as'     => 'style',
                            'onload' => "this.onload=null;this.rel='stylesheet'"
                        ],
                        ['priority' => false]
                    );
                    // todo: add  noscript
                }
                if(true) {
                    foreach ($entryPoint->css as $file)
                    {
                        $this->assetCollector->addStyleSheet(
                            "vite:{$entry}:{$file}",
                            $this->prepareAssetPath($outputDir . $file, $assetOptions['external']),
                            [
                                'rel' => 'preload',
                                'as' => 'style',
                                'onload' => "this.onload=null;this.rel='stylesheet'"
                            ],
                            ['priority' => false]
                        );
                        // todo: add  noscript
                    }
                }

            }
            else
            {

                if ($entryPoint->isCss())
                {
                    $this->assetCollector->addStyleSheet(
                        "vite:{$entry}",
                        $this->prepareAssetPath($outputDir . $entryPoint->file, $assetOptions['external']),
                        $cssTagAttributes,
                        $assetOptions
                    );
                }

                $cssTagAttributes = $this->prepareCssAttributes($cssTagAttributes);

                foreach ($manifest->getImportsForEntrypoint($entry, true) as $import)
                {
                    $identifier = md5($import->identifier . '|' . serialize($cssTagAttributes));
                    foreach ($import->css as $file)
                    {
                        $this->assetCollector->addStyleSheet(
                            "vite:{$identifier}:{$file}",
                            $this->prepareAssetPath($outputDir . $file, $assetOptions['external']),
                            $cssTagAttributes,
                            $assetOptions
                        );
                    }
                }

                foreach ($manifest->get($entry)->css as $file)
                {
                    $this->assetCollector->addStyleSheet(
                        "vite:{$entry}:{$file}",
                        $this->prepareAssetPath($outputDir . $file, $assetOptions['external']),
                        $cssTagAttributes,
                        $assetOptions
                    );
                }
            }
        }
    }

    private function parseExtendedManifestFile(string $manifestFile): ViteManifest
    {
        $cacheIdentifier = md5($manifestFile);
        $manifest = $this->cache->get($cacheIdentifier);
        if ($manifest === false)
        {
            $manifest = ViteManifest::fromFile($manifestFile);
            $this->cache->set($cacheIdentifier, $manifest);
        }
        return $manifest;
    }

    private function isCriticalCssEnabledByConfig(): bool
    {
        $viteCriticalCssConfig = $this->configuration['viteCritical']['criticalCss'] ?? [];
        if ($viteCriticalCssConfig['enable'] ?? false)
        {
            $this->viteCriticalCssConfig = $viteCriticalCssConfig;
            $simulateDev = (bool)(getenv('VITE_ASSET_COLLECTOR_SIMULATE_APPLICATION_CONTEXT_DEVELOPMENT') ?? 0);
            if ($simulateDev)
            {
                // this env param is only set to go into Development to simulate the production with dev vars
                return true;
            }
            if (Environment::getContext()->isProduction())
            {
                return true;
            }

            $variants = $this->viteCriticalCssConfig['variants'] ?? [];
            if (empty($variants) === false)
            {
                $applicationContext = Environment::getContext()->__toString();
                foreach ($variants as $variant)
                {
                    if (!empty($variant['condition']) && str_contains($variant['condition'], $applicationContext))
                    {
                        return $variant['enable'];
                    }
                }
            }
        }
        return false;
    }

    private function requestIsPartOfConfig(?string $name): bool
    {
        // Check entryPoint is set for current page ID
        $entryPointForPid = $this->viteCriticalCssConfig['entryPointForPid'] ?? [];
        if(empty($entryPointForPid) === false && $name !== null && isset($entryPointForPid[$name]))
        {
            $pids = GeneralUtility::intExplode(',', $entryPointForPid[$name], true);
            /** @var TypoScriptFrontendController $frontendController */
            $frontendController = $this->request->getAttribute('frontend.controller');
            return in_array($frontendController->id, $pids, true) || in_array($frontendController->contentPid, $pids, true);;
        }
        return false;
    }

    private function hasCritical(ViteManifestItem $entry): bool
    {
        return $entry->critical !== '';
    }

    private function getCriticalCss(ViteManifestItem $entry): string
    {
        return $entry->critical;
    }

    private function hasDeferred(ViteManifestItem $entry): bool
    {
        return $entry->deferred !== '';
    }

    private function getDeferredCss(ViteManifestItem $entry): string
    {
        return $entry->critical;
    }



}
